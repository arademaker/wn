module Main where

import Solr
import Query
import Filter
import Update
import Data.List
import GHC.IO.Encoding

import System.Exit ( exitSuccess )
import System.Environment ( getArgs )


main :: IO ()
main = do
  (wn,sg,vt) <- getArgs
  -- sets he encoding
  setLocaleEncoding utf8

  -- 
  freqFiltered <- frequencyFilter 20 <$> (relationSyns "") <*> (filteredFreq "")
  out <- show <$> freqFiltered
  putStrLn out
  where
    f x y = compare (snd y) (snd x)
    showOut [] = ""
    showOut ((rel,_):rels) =
      (wordA rel)++"\t"++(intercalate "/" (wordB rel))++"\n"++(showOut rels)

-- h
filteredFreq pathFrequencies =
  parseFrequencies <$> (getFrequencies pathFrequencies)
-- g
relationSyns pathSuggestions pathVotes =
  collectRelationsSenses <$> (filteredSyns <$> pathSuggestions <*> pathVotes)
-- f
filteredSyns pathSynsets pathSuggestions pathVotes =
  c4 <$> synsetDocs pathSynsets <*> (c2 <$> (suggestDocs pathSuggestions) <*> (fmap (c0 1) (scoreDocs pathVotes)))

scoreDocs path = fmap (f3 . f2 . f1) (readJL readVote path)
synsetDocs path = fmap (f1) (readJL readSynset path)
suggestDocs path = fmap (c1 . f1) (readJL readSuggestion path)
